<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="Scheduler" name="Scheduler" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
The Scheduler controls program flow between tending communications and executing events at precise times.
It is designed to run in a single-threaded environment so it can have maximum control.
Scheduler.eventLoop should be called after any program setup is completed.
The eventLoop function will frequently yield control *briefly* to Interface.onIdleCpu.
This gives the onIdleCpu function the possibility to schedule events using Scheduler.queue.
</doc>
  <base access="public">
    <type name="SchedulerBase" ref="SchedulerBase#SchedulerBase" />
  </base>
  <templatetypeparameter id="Scheduler::Interface" name="Interface" />
  <method id="Scheduler::queue" name="queue">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="Scheduler::queue::evt" name="evt">
      <type name="OutputEvent" qualifier=" const &amp;" ref="OutputEvent#OutputEvent" />
    </argument>
  </method>
  <methodtemplate id="Scheduler::setMaxSleep" name="setMaxSleep">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="Scheduler::setMaxSleep::duration" name="duration">
      <type name="T" />
    </argument>
    <templatetypeparameter id="Scheduler::setMaxSleep::T" name="T" />
  </methodtemplate>
  <method id="Scheduler::setDefaultMaxSleep" name="setDefaultMaxSleep">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <constructor id="Scheduler::Scheduler&lt;Interface&gt;" name="Scheduler&lt;Interface&gt;">
    <argument id="Scheduler::Scheduler&lt;Interface&gt;::interface" name="interface">
      <type name="Interface" />
    </argument>
  </constructor>
  <method id="Scheduler::initSchedThread" name="initSchedThread">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="Scheduler::isRoomInBuffer" name="isRoomInBuffer">
    <brief>call this from whatever threads call nextEvent to optimize that thread's priority.</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="Scheduler::eventLoop" name="eventLoop">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="Scheduler::exitEventLoop" name="exitEventLoop">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
</classtemplate>
