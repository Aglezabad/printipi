<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="State" name="State" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="State::Drv" name="Drv" />
  <constructor id="State::State&lt;Drv&gt;" name="State&lt;Drv&gt;">
    <brief>Initialize the state:</brief>
    <doc>Needs a driver object (drv), a communications channel (com), and needs to know whether or not the com channel must be persistent
M32 command allows branching to another, local gcode file. By default, this will PAUSE reading/writing from the previous com channel.
But if we want to continue reading from that original com channel while simultaneously reading from the new gcode file, then 'needPersistentCom' should be set to true.
This is normally only relevant for communication with a host, like Octoprint, where we want temperature reading, emergency stop, etc to still work.</doc>
    <argument id="State::State&lt;Drv&gt;::drv" name="drv">
      <type name="Drv" qualifier=" &amp;" />
    </argument>
    <argument id="State::State&lt;Drv&gt;::fs" name="fs">
      <type name="FileSystem" qualifier=" &amp;" ref="FileSystem#FileSystem" />
    </argument>
    <argument id="State::State&lt;Drv&gt;::com" name="com">
      <type name="gparse::Com" ref="gparse::Com#gparse::Com" />
    </argument>
    <argument id="State::State&lt;Drv&gt;::needPersistentCom" name="needPersistentCom">
      <type builtin="yes" name="bool" />
    </argument>
  </constructor>
  <method id="State::eventLoop" name="eventLoop">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="State::motionPlanner" name="motionPlanner">
    <return>
      <type name="motion::MotionPlanner&lt;Interface&gt;" qualifier=" const &amp;" ref="motion::MotionPlanner#motion::MotionPlanner" />
    </return>
  </method>
</classtemplate>
