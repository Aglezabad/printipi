<?xml version='1.0' encoding='utf-8'?>
<struct id="plat::rpi::PwmHeader" name="PwmHeader" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <field id="plat::rpi::PwmHeader::CTL" name="CTL">
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::STA" name="STA">
    <brief>0x00000000 //control register</brief>
    <doc>16-31 reserved
15 MSEN2 (0: PWM algorithm, 1:M/S transmission used)
14 reserved
13 USEF2 (0: data register is used for transmission, 1: FIFO is used for transmission)
12 POLA2 (0: 0=low, 1=high. 1: 0=high, 1=low (inversion))
11 SBIT2; defines the state of the output when no transmission is in place
10 RPTL2; 0: transmission interrupts when FIFO is empty. 1: last data in FIFO is retransmitted when FIFO is empty
9  MODE2; 0: PWM mode. 1: serializer mode
8  PWMEN2; 0: channel is disabled. 1: channel is enabled
7  MSEN1;
6  CLRF1; writing a 1 to this bit clears the channel 1 (and channel 2?) fifo
5  USEF1;
4  POLA1;
3  SBIT1;
2  RPTL1;
1  MODE1;
0  PWMEN1;</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::DMAC" name="DMAC">
    <brief>0x00000004 //status register</brief>
    <doc>13-31 reserved
9-12 STA1-4; indicates whether each channel is transmitting
8    BERR; Bus Error Flag. Write 1 to clear
4-7  GAPO1-4; Gap Occured Flag. Write 1 to clear
3    RERR1; Fifo Read Error Flag (attempt to read empty fifo). Write 1 to clear
2    WERR1; Fifo Write Error Flag (attempt to write to full fifo). Write 1 to clear
1    EMPT1; Reads as 1 if fifo is empty
0    FULL1; Reads as 1 if fifo is full</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::_padding1" name="_padding1">
    <brief>0x00000008 //DMA control register</brief>
    <doc>31   ENAB; set to 1 to enable DMA
16-30 reserved
8-15 PANIC; DMA threshold for panic signal
0-7  DREQ;  DMA threshold for DREQ signal</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::RNG1" name="RNG1">
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::DAT1" name="DAT1">
    <brief>0x00000010 //channel 1 range register (# output bits to use per sample)</brief>
    <doc>0-31 PWM_RNGi; #of bits to modulate PWM. (eg if PWM_RNGi=1024, then each 32-bit sample sent through the FIFO will be modulated into 1024 bits.)</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::FIF1" name="FIF1">
    <brief>0x00000014 //channel 1 data</brief>
    <doc>0-31 PWM_DATi; Stores the 32-bit data to be sent to the PWM controller ONLY WHEN USEFi=0 (FIFO is disabled)</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::_padding2" name="_padding2">
    <brief>0x00000018 //channel 1 fifo (write to this register to queue an output)</brief>
    <doc>writing to this register will queue a sample into the fifo. If 2 channels are enabled, then each even sample (0-indexed) is sent to channel 1, and odd samples are sent to channel 2. WRITE-ONLY</doc>
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::RNG2" name="RNG2">
    <type name="uint32_t" />
  </field>
  <field id="plat::rpi::PwmHeader::DAT2" name="DAT2">
    <brief>0x00000020 //channel 2 range register</brief>
    <type name="uint32_t" />
  </field>
</struct>
