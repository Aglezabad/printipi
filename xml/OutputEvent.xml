<?xml version='1.0' encoding='utf-8'?>
<class id="OutputEvent" name="OutputEvent" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
An OutputEvent encapsulates information about the desired state for a GPIO pin at a given time.
  Eg, "set pin (2) (high) at t=(1234567) uS", or "set pin (44) (low) at t=(887766) uS"
</doc>
  <constructor id="OutputEvent::OutputEvent" name="OutputEvent">
    <brief>default constructor. Creates an OutputEvent where isNull() will return true</brief>
  </constructor>
  <constructor id="OutputEvent::OutputEvent" name="OutputEvent">
    <brief>Construct from a time point, a pin and a state.</brief>
    <argument id="OutputEvent::OutputEvent::time" name="time">
      <doc>the time at which the pin state should be altered.</doc>
      <type name="plat::generic::ChronoClock::time_point" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::time_point" />
    </argument>
    <argument id="OutputEvent::OutputEvent::pin" name="pin">
      <type name="iodrv::IoPin" qualifier=" const &amp;" ref="iodrv::IoPin#iodrv::IoPin" />
    </argument>
    <argument id="OutputEvent::OutputEvent::state" name="state">
      <doc>the logical state the pin should be put in *before* any inversions have been processed.
so if @state is IoHigh, pin.areWritesInverted() == true, then the physical hardware pin will output LOW (0V / Ground)</doc>
      <type builtin="yes" name="bool" />
    </argument>
  </constructor>
  <method id="OutputEvent::isNull" name="isNull">
    <brief>@return true if the OutputEvent was default-constructed.</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="OutputEvent::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="OutputEvent::operator==::other" name="other">
      <type name="OutputEvent" qualifier=" const &amp;" ref="OutputEvent#OutputEvent" />
    </argument>
  </method>
  <method id="OutputEvent::primitiveIoPin" name="primitiveIoPin">
    <brief>@return the pin that should be affected.</brief>
    <return>
      <type name="PrimitiveIoPin" qualifier=" const &amp;" ref="index#PrimitiveIoPin" />
    </return>
  </method>
  <method id="OutputEvent::primitiveIoPin" name="primitiveIoPin">
    <brief>@return the pin that should be affected.</brief>
    <return>
      <type name="PrimitiveIoPin" qualifier=" &amp;" ref="index#PrimitiveIoPin" />
    </return>
  </method>
  <method id="OutputEvent::state" name="state">
    <brief>@return the state that the pin should be set to.</brief>
    <doc>Note: since this is a PrimitiveIoPin, any inversions have already been processed.
so if state() returns IoHigh, then the pin should output 3.3v (or 5v, etc).
if IoLow, then pin should output 0v (ground)</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="OutputEvent::time" name="time">
    <brief>@return the time at which the pin state should be altered.</brief>
    <return>
      <type name="plat::generic::ChronoClock::time_point" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::time_point" />
    </return>
  </method>
</class>
