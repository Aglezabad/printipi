<?xml version='1.0' encoding='utf-8'?>
<namespace id="gparse" name="gparse" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>#List of commands on Reprap Wiki:</brief>
  <doc>cmds = ['G0', 'G1', 'G2', 'G3', 'G4', 'G10', 'G20', 'G21', 'G28', 'G29', 'G30', 'G31', 'G32', 'G90', 'G91', 'G92', 'M0', 'M1', 'M3', 'M4', 'M5', 'M7', 'M8', 'M9', 'M10', 'M11', 'M17', 'M18', 'M20', 'M21', 'M22', 'M23', 'M24', 'M25', 'M26', 'M27', 'M28', 'M29', 'M30', 'M32', 'M40', 'M41', 'M42', 'M43', 'M80', 'M81', 'M82', 'M83', 'M84', 'M92', 'M98', 'M99', 'M103', 'M104', 'M105', 'M106', 'M107', 'M108', 'M109', 'M110', 'M111', 'M112', 'M113', 'M114', 'M115', 'M116', 'M117', 'M118', 'M119', 'M120', 'M121', 'M122', 'M123', 'M124', 'M126', 'M127', 'M128', 'M129', 'M130', 'M131', 'M132', 'M133', 'M134', 'M135', 'M136', 'M140', 'M141', 'M142', 'M143', 'M144', 'M160', 'M190', 'M200', 'M201', 'M202', 'M203', 'M204', 'M205', 'M206', 'M207', 'M208', 'M209', 'M210', 'M220', 'M221', 'M226', 'M227', 'M228', 'M229', 'M230', 'M240', 'M241', 'M245', 'M246', 'M280', 'M300', 'M301', 'M302', 'M303', 'M304', 'M305', 'M400', 'M420', 'M540', 'M550', 'M551', 'M552', 'M553', 'M554', 'M555', 'M556', 'M557', 'M558', 'M559', 'M560', 'M561', 'M562', 'M563', 'M564', 'M565', 'M566', 'M567', 'M568', 'M569', 'M665', 'M906', 'M998', 'M999']
#code to generate isXXXX() functions:
arguments = [", ".join("'%s'" %c for c in cmd) for cmd in cmds]
funcs = ["inline bool is%s() const { return isOpcode(bigEndianStr(%s)); }" %(cmd, args) for (cmd, args) in zip(cmds, arguments)]
pretty = "\n".join("        %s" %f for f in funcs)
print pretty</doc>
  <class name="Com" ref="gparse::Com#gparse::Com" />
  <class name="Command" ref="gparse::Command#gparse::Command" />
  <class name="Response" ref="gparse::Response#gparse::Response" />
  <enum anonymous="yes" id="gparse::ResponseCode" name="ResponseCode">
    <enumvalue id="gparse::ResponseOk" name="ResponseOk" value="0" />
    <enumvalue id="gparse::ResponseNull" name="ResponseNull" value="1" />
  </enum>
  <function id="gparse::bigEndianStr" name="bigEndianStr">
    <brief>bigEndianStr turns a series of characters into a uint32_t for fast string-comparisons.</brief>
    <doc>Eg bigEndianStr('G', '1', '0') is similar to an array, x, where x[0] == 'G', x[1] == '1' and x[2] == '0', but held in fixed-width.</doc>
    <return>
      <type name="uint32_t" />
    </return>
    <argument id="gparse::bigEndianStr::a" name="a">
      <type builtin="yes" name="char" />
    </argument>
  </function>
  <function id="gparse::bigEndianStr" name="bigEndianStr">
    <return>
      <type name="uint32_t" />
    </return>
    <argument id="gparse::bigEndianStr::a" name="a">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::b" name="b">
      <type builtin="yes" name="char" />
    </argument>
  </function>
  <function id="gparse::bigEndianStr" name="bigEndianStr">
    <return>
      <type name="uint32_t" />
    </return>
    <argument id="gparse::bigEndianStr::a" name="a">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::b" name="b">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::c" name="c">
      <type builtin="yes" name="char" />
    </argument>
  </function>
  <function id="gparse::bigEndianStr" name="bigEndianStr">
    <return>
      <type name="uint32_t" />
    </return>
    <argument id="gparse::bigEndianStr::a" name="a">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::b" name="b">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::c" name="c">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="gparse::bigEndianStr::d" name="d">
      <type builtin="yes" name="char" />
    </argument>
  </function>
</namespace>
