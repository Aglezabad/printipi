<?xml version='1.0' encoding='utf-8'?>
<class id="iodrv::RCThermistor" name="RCThermistor" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
This class provides code to approximate a temperature via first determining the resistance of a thermistor
  (resistor that varies its resistance according to temperature) via only a digital IO pin, fixed resistor and capacitor.
The raspberry pi doesn't have any ADC pins, so we must use the method outlined here (figure 1):
  http://www.robotshop.com/media/files/pdf/RCtime_App_Note.pdf

                    Vcc
                    _|_
                    ___ C
            Ra       |         Rt
 Vin ----/\/\/\/\----+------/\/\/\/\---- GND

 Rt is the thermistor, Ra is a known and fixed resistance.

NOTE: there are almost certainly better ways to achieve ADC conversion on a Raspberry Pi.
  A discussion on these can be found here: https://github.com/Wallacoloo/printipi/issues/24
</doc>
  <constructor id="iodrv::RCThermistor::RCThermistor" name="RCThermistor">
    <argument id="iodrv::RCThermistor::RCThermistor::pin" name="pin">
      <type name="IoPin &amp;&amp;" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::R_OHMS" name="R_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::C_FARADS" name="C_FARADS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::VCC_V" name="VCC_V">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::V_TOGGLE_V" name="V_TOGGLE_V">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::T0_C" name="T0_C">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::R0_OHMS" name="R0_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor::RCThermistor::BETA" name="BETA">
      <type builtin="yes" name="float" />
    </argument>
  </constructor>
  <method id="iodrv::RCThermistor::isReady" name="isReady">
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="iodrv::RCThermistor::startRead" name="startRead">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="iodrv::RCThermistor::timeSinceStartRead" name="timeSinceStartRead">
    <return>
      <type name="plat::generic::ChronoClock::duration" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::duration" />
    </return>
  </method>
  <method id="iodrv::RCThermistor::value" name="value">
    <return>
      <type builtin="yes" name="float" />
    </return>
  </method>
</class>
