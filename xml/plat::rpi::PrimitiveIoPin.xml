<?xml version='1.0' encoding='utf-8'?>
<class id="plat::rpi::PrimitiveIoPin" name="PrimitiveIoPin" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <constructor id="plat::rpi::PrimitiveIoPin::PrimitiveIoPin" name="PrimitiveIoPin">
    <brief>@pinIdx *logical* index of the pin</brief>
    <argument id="plat::rpi::PrimitiveIoPin::PrimitiveIoPin::pinIdx" name="pinIdx">
      <type name="mitpi::GpioPin" ref="mitpi#mitpi::GpioPin" />
    </argument>
    <argument id="plat::rpi::PrimitiveIoPin::PrimitiveIoPin::pullUpDown" name="pullUpDown">
      <doc>direct this pin to either pull up to 3.3v, down to gnd, or no pull at all.
Note that this pull direction will be applied **even when operating as an output pin**.
The rpi's pull resistors preserve state across reboots.
This makes it so that when the Pi resets, its pins will still be in a defined state (no runaway heater while the Pi is still booting)
Of course, it's still a VERY GOOD IDEA to use hardware pull resistors as well.
**Also note:** @pullUpDown acts the same regardless of the &amp;lt;IoPin&amp;gt;'s read/write inversions.</doc>
      <type name="mitpi::GpioPull" ref="mitpi#mitpi::GpioPull" />
    </argument>
  </constructor>
  <method id="plat::rpi::PrimitiveIoPin::digitalRead" name="digitalRead">
    <brief>read the pin's input value (must call makeDigitalInput beforehand)</brief>
    <return>
      <type name="IoLevel" ref="index#IoLevel" />
    </return>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::digitalWrite" name="digitalWrite">
    <brief>write a digital value to the pin. IoHigh = 3.3v, IoLow = 0v. Must call makeDigitalOutput beforehand</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="plat::rpi::PrimitiveIoPin::digitalWrite::lev" name="lev">
      <type name="IoLevel" ref="index#IoLevel" />
    </argument>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::id" name="id">
    <brief>@return the logical index of the pin (for use with other platform-specific functions)</brief>
    <return>
      <type name="mitpi::GpioPin" ref="mitpi#mitpi::GpioPin" />
    </return>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::isNull" name="isNull">
    <brief>@return true if the pin is equal to the one constructed by the <ref ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin::null">plat::rpi::PrimitiveIoPin::null</ref> function.</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::makeDigitalInput" name="makeDigitalInput">
    <brief>configure the pin to be an input</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::makeDigitalOutput" name="makeDigitalOutput">
    <brief>configure the pin as an output, and set its output state</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="plat::rpi::PrimitiveIoPin::makeDigitalOutput::lev" name="lev">
      <type name="IoLevel" ref="index#IoLevel" />
    </argument>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::makePwmOutput" name="makePwmOutput">
    <brief>configure the pin as a PWM output &amp; set its duty cycle and period (if applicable)</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="plat::rpi::PrimitiveIoPin::makePwmOutput::duty" name="duty">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="plat::rpi::PrimitiveIoPin::makePwmOutput::desiredPeriod" name="desiredPeriod">
      <type builtin="yes" name="float" />
    </argument>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::null" name="null" static="yes">
    <brief>@return a pin with an invalid output</brief>
    <doc>Note that it is undefined to call any function on a null pin except for <ref ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin::isNull">plat::rpi::PrimitiveIoPin::isNull</ref> and <ref ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin::id">plat::rpi::PrimitiveIoPin::id</ref>.</doc>
    <return>
      <type name="PrimitiveIoPin" ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin" />
    </return>
  </method>
  <method id="plat::rpi::PrimitiveIoPin::pwmWrite" name="pwmWrite">
    <brief>set pwm duty cycle &amp; period (if applicable). Must call makePwmOutput beforehand.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="plat::rpi::PrimitiveIoPin::pwmWrite::duty" name="duty">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="plat::rpi::PrimitiveIoPin::pwmWrite::desiredPeriod" name="desiredPeriod">
      <type builtin="yes" name="float" />
    </argument>
  </method>
</class>
