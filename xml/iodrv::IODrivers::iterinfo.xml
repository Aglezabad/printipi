<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="iodrv::IODrivers::iterinfo" name="iterinfo" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Allow one to build a filter before iterating.</brief>
  <doc>Also supports indexing and convenience functions that operate on the whole set.</doc>
  <templatetypeparameter id="iodrv::IODrivers::iterinfo::Predicate" name="Predicate">
    <default>
      <type name="iodrv::IODrivers&lt;TupleT&gt;::NoPredicate" ref="iodrv::IODrivers::NoPredicate#iodrv::IODrivers::NoPredicate" />
    </default>
  </templatetypeparameter>
  <enum anonymous="yes" id="iodrv::IODrivers::iterinfo::ShortCircuitType" name="ShortCircuitType">
    <enumvalue id="iodrv::IODrivers::iterinfo::NO_SHORT_CIRCUIT" name="NO_SHORT_CIRCUIT" value="0" />
    <enumvalue id="iodrv::IODrivers::iterinfo::DO_SHORT_CIRCUIT" name="DO_SHORT_CIRCUIT" value="0" />
  </enum>
  <constructor id="iodrv::IODrivers::iterinfo::iterinfo&lt;Predicate&gt;" name="iterinfo&lt;Predicate&gt;">
    <argument id="iodrv::IODrivers::iterinfo::iterinfo&lt;Predicate&gt;::drivers" name="drivers">
      <type name="TupleT" qualifier=" &amp;" />
    </argument>
  </constructor>
  <method id="iodrv::IODrivers::iterinfo::begin" name="begin">
    <return>
      <type name="IODrivers&lt;TupleT&gt;::iterator&lt;Predicate&gt;" ref="iodrv::IODrivers::iterator#iodrv::IODrivers::iterator" />
    </return>
  </method>
  <method id="iodrv::IODrivers::iterinfo::end" name="end">
    <return>
      <type name="IODrivers&lt;TupleT&gt;::iterator&lt;Predicate&gt;" ref="iodrv::IODrivers::iterator#iodrv::IODrivers::iterator" />
    </return>
  </method>
  <method id="iodrv::IODrivers::iterinfo::operator[]" name="operator[]">
    <return>
      <type name="IODrivers&lt;TupleT&gt;::iterator&lt;Predicate&gt;" ref="iodrv::IODrivers::iterator#iodrv::IODrivers::iterator" />
    </return>
    <argument id="iodrv::IODrivers::iterinfo::operator[]::idx" name="idx">
      <type name="std::size_t" />
    </argument>
  </method>
  <methodtemplate id="iodrv::IODrivers::iterinfo::apply" name="apply">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="iodrv::IODrivers::iterinfo::apply::f" name="f">
      <type name="F &amp;&amp;" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::apply::args" name="args">
      <type name="Args..." />
    </argument>
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::apply::F" name="F" />
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::apply::Args" name="Args" />
  </methodtemplate>
  <methodtemplate id="iodrv::IODrivers::iterinfo::reduce" name="reduce">
    <brief>Standard reduce function found in functional languages</brief>
    <doc>Return dflt if the collection is empty
Return f(dflt, ioDrivers[0]) for a one-item collection
Return f(f(dflt, ioDrivers[0]), ioDrivers[1]) for a two-item collection
Generalizes to f(...(dflt, ioDrivers[0]), ioDrivers[n]) for an n-item collection</doc>
    <return>
      <type name="Ret" />
    </return>
    <argument id="iodrv::IODrivers::iterinfo::reduce::f" name="f">
      <type name="F &amp;&amp;" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::reduce::dflt" name="dflt">
      <type name="Ret" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::reduce::args" name="args">
      <type name="Args..." />
    </argument>
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::reduce::F" name="F" />
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::reduce::Ret" name="Ret" />
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::reduce::Args" name="Args" />
  </methodtemplate>
  <methodtemplate id="iodrv::IODrivers::iterinfo::any" name="any">
    <brief>Stadard any function found in functional languages.</brief>
    <doc>return f(ioDrivers[0], args...) || f(ioDrivers[1], args...) || ...
Control short-circuit evaluation via the shortCircuit flag.</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="iodrv::IODrivers::iterinfo::any::f" name="f">
      <type name="F &amp;&amp;" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::any::shortCircuit" name="shortCircuit">
      <type name="IODrivers&lt;TupleT&gt;::iterinfo&lt;Predicate&gt;::ShortCircuitType" ref="iodrv::IODrivers::iterinfo#iodrv::IODrivers::iterinfo::ShortCircuitType" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::any::args" name="args">
      <type name="Args &amp;&amp;..." />
    </argument>
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::any::F" name="F" />
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::any::Args" name="Args" />
  </methodtemplate>
  <methodtemplate id="iodrv::IODrivers::iterinfo::all" name="all">
    <brief>Stadard any function found in functional languages.</brief>
    <doc>return f(ioDrivers[0], args...) || f(ioDrivers[1], args...) || ...
Control short-circuit evaluation via the shortCircuit flag.</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="iodrv::IODrivers::iterinfo::all::f" name="f">
      <type name="F &amp;&amp;" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::all::shortCircuit" name="shortCircuit">
      <type name="IODrivers&lt;TupleT&gt;::iterinfo&lt;Predicate&gt;::ShortCircuitType" ref="iodrv::IODrivers::iterinfo#iodrv::IODrivers::iterinfo::ShortCircuitType" />
    </argument>
    <argument id="iodrv::IODrivers::iterinfo::all::args" name="args">
      <type name="Args &amp;&amp;..." />
    </argument>
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::all::F" name="F" />
    <templatetypeparameter id="iodrv::IODrivers::iterinfo::all::Args" name="Args" />
  </methodtemplate>
</classtemplate>
