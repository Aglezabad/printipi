<?xml version='1.0' encoding='utf-8'?>
<class id="iodrv::RCThermistor2Pin" name="RCThermistor2Pin" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
This class provides code to approximate a temperature via first determining the resistance of a thermistor
  (resistor that varies its resistance according to temperature) via only a digital IO pin, fixed resistor and capacitor.
The raspberry pi doesn't have any ADC pins, so we must use the method outlined below.
The implementation is designed to be compatible with ramps-fd.

               Vcc
                \
                / Rup
                \
        Rseries /        Rchrg
     o---/\/\/\-+-----o-/\/\/\-o
     \         _|_             |
     / therm   ___ C           |
     \          |              |
  THERMPIN     GND          CHRG/MEAS

 On ramps-fd Rup = 4.7k, Rseries = 22 ohm.
 Rchrg can be anything &gt; ~200 ohms - make sure not to draw more than 16 mA from a pin.
 If drawing a significant amount of current, make sure to configure the Pi's pin drive strength first.
 Recommended Rchrg value is 1k ohm. The ratio Rchrg / Rup should be significantly less than 0.5 to ensure that the pin state actually changes
 Also, Rseries should be such that the thermistor resistance + Rseries is always such that &lt; 16 mA is drawn.

 Note: in the case that Rchrg = 0, therm = infinite, discharge time = 0.69*RC = 32.8 mS with Rup=4k7, C=10.1e-6, Vtoggle=1.65
   so that's the absolute longest discharge time.

 TODO: given this thermistor circuit, it is possible to achieve some amount of auto-calibration upon boot.
   Pull CHRG low, disactivate THERMPIN, and let the circuit reach steady-state.
   Then put CHRG/MEAS into input mode, and measure the time it takes for the state to switch.
   This time is dependent upon C, Rup, Vcc and Vtoggle only.
   We can adjust one (or multiple) of those variables to reflect the actual measurement.
   Vtoggle likely has the highest variability, so adjust that one.
 We can actually achieve two calibration data:
   One charging through only Rup, and the other charging through Rup and Rchrg
</doc>
  <base access="public">
    <type name="IODriver" ref="iodrv::IODriver#iodrv::IODriver" />
  </base>
  <constructor id="iodrv::RCThermistor2Pin::RCThermistor2Pin" name="RCThermistor2Pin">
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::thermPin" name="thermPin">
      <type name="IoPin &amp;&amp;" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::chargeMeasPin" name="chargeMeasPin">
      <type name="IoPin &amp;&amp;" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::RCHRG_OHMS" name="RCHRG_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::RSERIES_OHMS" name="RSERIES_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::RUP_OHMS" name="RUP_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::C_FARADS" name="C_FARADS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::VCC_V" name="VCC_V">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::V_TOGGLE_V" name="V_TOGGLE_V">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::T0_C" name="T0_C">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::R0_OHMS" name="R0_OHMS">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::BETA" name="BETA">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="iodrv::RCThermistor2Pin::RCThermistor2Pin::readInterval" name="readInterval">
      <type name="plat::generic::ChronoClock::duration" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::duration" />
    </argument>
  </constructor>
  <method id="iodrv::RCThermistor2Pin::onIdleCpu" name="onIdleCpu" override="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="iodrv::RCThermistor2Pin::onIdleCpu::interval" name="interval">
      <type name="OnIdleCpuIntervalT" ref="index#OnIdleCpuIntervalT" />
    </argument>
    <override name="IODriver::onIdleCpu" ref="iodrv::IODriver#iodrv::IODriver::onIdleCpu" />
  </method>
  <method id="iodrv::RCThermistor2Pin::value" name="value">
    <return>
      <type builtin="yes" name="float" />
    </return>
  </method>
</class>
