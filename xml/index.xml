<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <functiontemplate id="makeTestHelper" name="makeTestHelper">
    <return>
      <type name="TestHelper&lt;MachineT&gt;" ref="TestHelper#TestHelper" />
    </return>
    <argument id="makeTestHelper::machine" name="machine">
      <type name="MachineT &amp;&amp;" />
    </argument>
    <argument id="makeTestHelper::args" name="args">
      <type name="Args..." />
    </argument>
    <templatetypeparameter id="makeTestHelper::MachineT" name="MachineT" />
    <templatetypeparameter id="makeTestHelper::Args" name="Args" />
  </functiontemplate>
  <functiontemplate id="makeTestMachine" name="makeTestMachine">
    <doc>
In gcc-4.6, the following results in "sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list"
So use the workaround further below.
template &amp;lt;typename ... Args&amp;gt; TestMachine&amp;lt;Args...&amp;gt; makeTestMachine(Args ...args) {
 return TestMachine&amp;lt;Args...&amp;gt;(args...);
}</doc>
    <return>
      <type name="TestMachine&lt;GetIoDrivers, GetCoordMap, GetAccelerationProfile&gt;" ref="TestMachine#TestMachine" />
    </return>
    <argument id="makeTestMachine::getIoDrivers" name="getIoDrivers">
      <type name="const GetIoDrivers" qualifier=" const &amp;" />
    </argument>
    <argument id="makeTestMachine::getCoordMap" name="getCoordMap">
      <type name="const GetCoordMap" qualifier=" const &amp;" />
    </argument>
    <argument id="makeTestMachine::getAccelerationProfile" name="getAccelerationProfile">
      <type name="const GetAccelerationProfile" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="makeTestMachine::GetIoDrivers" name="GetIoDrivers">
      <default>
        <type name="DefaultGetIoDrivers" ref="DefaultGetIoDrivers#DefaultGetIoDrivers" />
      </default>
    </templatetypeparameter>
    <templatetypeparameter id="makeTestMachine::GetCoordMap" name="GetCoordMap">
      <default>
        <type name="DefaultGetCoordMap" ref="DefaultGetCoordMap#DefaultGetCoordMap" />
      </default>
    </templatetypeparameter>
    <templatetypeparameter id="makeTestMachine::GetAccelerationProfile" name="GetAccelerationProfile">
      <default>
        <type name="DefaultGetAccelerationProfile" ref="DefaultGetAccelerationProfile#DefaultGetAccelerationProfile" />
      </default>
    </templatetypeparameter>
  </functiontemplate>
  <variable id="NotPresent" name="NotPresent">
    <type name="OptionalArg&lt;float&gt;" qualifier=" const" />
  </variable>
  <namespace name="argparse" ref="argparse#argparse" />
  <namespace name="gparse" ref="gparse#gparse">
    <class name="Com" ref="gparse::Com#gparse::Com" />
    <class name="Command" ref="gparse::Command#gparse::Command" />
    <classtemplate name="ComStreamOwnershipMarker" ref="gparse::ComStreamOwnershipMarker#gparse::ComStreamOwnershipMarker">
      <brief>Used during Com construction to wrap the stream input to give an indication of who owns the stream.</brief>
      <templatetypeparameter id="gparse::ComStreamOwnershipMarker::T" name="T" />
    </classtemplate>
    <class name="ComStreamOwnershipMarker" ref="gparse::ComStreamOwnershipMarker#gparse::ComStreamOwnershipMarker" />
    <class name="ComStreamOwnershipMarker" ref="gparse::ComStreamOwnershipMarker#gparse::ComStreamOwnershipMarker" />
    <class name="Response" ref="gparse::Response#gparse::Response" />
  </namespace>
  <namespace name="iodrv" ref="iodrv#iodrv">
    <class name="Endstop" ref="iodrv::Endstop#iodrv::Endstop">
      <brief>forward declare for class in "endstop.h"</brief>
    </class>
    <class name="Fan" ref="iodrv::Fan#iodrv::Fan" />
    <class name="IODriver" ref="iodrv::IODriver#iodrv::IODriver" />
    <classtemplate name="IODrivers" ref="iodrv::IODrivers#iodrv::IODrivers">
      <templatetypeparameter id="iodrv::IODrivers::TupleT" name="TupleT" />
      <class name="iteratorbase" ref="iodrv::IODrivers::iteratorbase#iodrv::IODrivers::iteratorbase">
        <brief>Base type for iterators.</brief>
      </class>
      <classtemplate name="iterator" ref="iodrv::IODrivers::iterator#iodrv::IODrivers::iterator">
        <brief>iterator class that also supports a filter predicate.</brief>
        <templatetypeparameter id="iodrv::IODrivers::iterator::Predicate" name="Predicate">
          <brief>function that should return false for any item that is not part of the desired set.</brief>
          <doc>Note that the Predicate function cannot easily store state info, as it may be instantiated for each item.</doc>
          <default>
            <type name="iodrv::IODrivers&lt;TupleT&gt;::NoPredicate" ref="iodrv::IODrivers::NoPredicate#iodrv::IODrivers::NoPredicate" />
          </default>
        </templatetypeparameter>
      </classtemplate>
      <classtemplate name="iterinfo" ref="iodrv::IODrivers::iterinfo#iodrv::IODrivers::iterinfo">
        <brief>Allow one to build a filter before iterating.</brief>
        <templatetypeparameter id="iodrv::IODrivers::iterinfo::Predicate" name="Predicate">
          <default>
            <type name="iodrv::IODrivers&lt;TupleT&gt;::NoPredicate" ref="iodrv::IODrivers::NoPredicate#iodrv::IODrivers::NoPredicate" />
          </default>
        </templatetypeparameter>
      </classtemplate>
    </classtemplate>
    <class name="IoPin" ref="iodrv::IoPin#iodrv::IoPin">
      <class name="null" ref="iodrv::IoPin::null#iodrv::IoPin::null">
        <brief>forward-declare a 'null' class for IoPin so that we can initialze IoPin(IoPin::null()) explicitly</brief>
      </class>
    </class>
    <class name="RCThermistor2Pin" ref="iodrv::RCThermistor2Pin#iodrv::RCThermistor2Pin" />
    <class name="Servo" ref="iodrv::Servo#iodrv::Servo">
      <brief>Controls a Servo motor.</brief>
    </class>
    <class name="StepDirStepperDriver" ref="iodrv::StepDirStepperDriver#iodrv::StepDirStepperDriver" />
    <classtemplate name="TempControl" ref="iodrv::TempControl#iodrv::TempControl">
      <templatetypeparameter id="iodrv::TempControl::Thermistor" name="Thermistor" />
      <templatetypeparameter id="iodrv::TempControl::PID" name="PID">
        <default>
          <type name="PID" ref="PID#PID" />
        </default>
      </templatetypeparameter>
      <templatetypeparameter id="iodrv::TempControl::Filter" name="Filter">
        <default>
          <type name="NoFilter" ref="NoFilter#NoFilter" />
        </default>
      </templatetypeparameter>
    </classtemplate>
  </namespace>
  <namespace name="logging" ref="logging#logging" />
  <namespace name="machines" ref="machines#machines">
    <namespace name="generic" ref="machines::generic#machines::generic">
      <class name="cartesian" ref="machines::generic::cartesian#machines::generic::cartesian">
        <brief>for Acceleration &amp; such</brief>
      </class>
    </namespace>
    <namespace name="rpi" ref="machines::rpi#machines::rpi">
      <class name="firepickdelta" ref="machines::rpi::firepickdelta#machines::rpi::firepickdelta">
        <brief>for ConstantAcceleration &amp; such</brief>
      </class>
      <class name="kosselrampsfd" ref="machines::rpi::kosselrampsfd#machines::rpi::kosselrampsfd">
        <brief>for ConstantAcceleration &amp; such</brief>
      </class>
    </namespace>
    <class name="Machine" ref="machines::Machine#machines::Machine" />
  </namespace>
  <namespace name="mathutil" ref="mathutil#mathutil" />
  <namespace name="mitpi" ref="mitpi#mitpi">
    <struct name="InitMitpiType" ref="mitpi::InitMitpiType#mitpi::InitMitpiType">
      <brief>convenience type used to manage lifetime of mitpi.</brief>
    </struct>
    <typedef name="PinIntType" ref="mitpi::PinIntType#mitpi::PinIntType">
      <type builtin="yes" name="unsigned int" />
    </typedef>
  </namespace>
  <namespace name="motion" ref="motion#motion">
    <brief>for motion::USE_ENDSTOPS</brief>
    <struct name="AccelerationProfile" ref="motion::AccelerationProfile#motion::AccelerationProfile" />
    <classtemplate name="AngularDeltaCoordMap" ref="motion::AngularDeltaCoordMap#motion::AngularDeltaCoordMap">
      <templatetypeparameter id="motion::AngularDeltaCoordMap::Stepper1" name="Stepper1" />
      <templatetypeparameter id="motion::AngularDeltaCoordMap::Stepper2" name="Stepper2" />
      <templatetypeparameter id="motion::AngularDeltaCoordMap::Stepper3" name="Stepper3" />
      <templatetypeparameter id="motion::AngularDeltaCoordMap::Stepper4" name="Stepper4" />
      <templatetypeparameter id="motion::AngularDeltaCoordMap::BedLevelT" name="BedLevelT">
        <default>
          <type name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
        </default>
      </templatetypeparameter>
    </classtemplate>
    <classtemplate name="AngularDeltaStepper" ref="motion::AngularDeltaStepper#motion::AngularDeltaStepper">
      <templatetypeparameter id="motion::AngularDeltaStepper::StepperDriverT" name="StepperDriverT" />
    </classtemplate>
    <structtemplate name="array_size" ref="motion::array_size#motion::array_size">
      <brief>Easiest way to extract the size of an array from its type.</brief>
      <templatetypeparameter id="motion::array_size::ArrayT" name="ArrayT" />
    </structtemplate>
    <class name="AxisStepper" ref="motion::AxisStepper#motion::AxisStepper" />
    <classtemplate name="AxisStepperWithDriver" ref="motion::AxisStepperWithDriver#motion::AxisStepperWithDriver">
      <templatetypeparameter id="motion::AxisStepperWithDriver::StepperDriver" name="StepperDriver" />
    </classtemplate>
    <class name="ConstantAcceleration" ref="motion::ConstantAcceleration#motion::ConstantAcceleration" />
    <class name="CoordMap" ref="motion::CoordMap#motion::CoordMap" />
    <classtemplate name="LinearCoordMap" ref="motion::LinearCoordMap#motion::LinearCoordMap">
      <templatetypeparameter id="motion::LinearCoordMap::Stepper1" name="Stepper1" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper2" name="Stepper2" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper3" name="Stepper3" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper4" name="Stepper4" />
      <templatetypeparameter id="motion::LinearCoordMap::BedLevelT" name="BedLevelT">
        <default>
          <type name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
        </default>
      </templatetypeparameter>
    </classtemplate>
    <classtemplate name="LinearDeltaCoordMap" ref="motion::LinearDeltaCoordMap#motion::LinearDeltaCoordMap">
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper1" name="Stepper1" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper2" name="Stepper2" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper3" name="Stepper3" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper4" name="Stepper4" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::BedLevelT" name="BedLevelT">
        <default>
          <type name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
        </default>
      </templatetypeparameter>
    </classtemplate>
    <classtemplate name="LinearDeltaStepper" ref="motion::LinearDeltaStepper#motion::LinearDeltaStepper">
      <templatetypeparameter id="motion::LinearDeltaStepper::StepperDriverT" name="StepperDriverT" />
    </classtemplate>
    <classtemplate name="LinearStepper" ref="motion::LinearStepper#motion::LinearStepper">
      <templatetypeparameter id="motion::LinearStepper::StepperDriverT" name="StepperDriverT" />
    </classtemplate>
    <classtemplate name="MaxOutputEventSequenceSize" ref="motion::MaxOutputEventSequenceSize#motion::MaxOutputEventSequenceSize">
      <brief>given a tuple of AxisSteppers, MaxOutputEventSequenceSize&amp;lt;myTuple&amp;gt;::maxSize will return the maximum size</brief>
      <templatetypeparameter id="motion::MaxOutputEventSequenceSize::AxisStepperTypes" name="AxisStepperTypes" />
      <templatenontypeparameter default="std" id="motion::MaxOutputEventSequenceSize::IdxPlusOne" name="IdxPlusOne">
        <type name="std::size_t" />
      </templatenontypeparameter>
    </classtemplate>
    <classtemplate name="MotionPlanner" ref="motion::MotionPlanner#motion::MotionPlanner">
      <templatetypeparameter id="motion::MotionPlanner::Interface" name="Interface" />
    </classtemplate>
    <struct name="NoAcceleration" ref="motion::NoAcceleration#motion::NoAcceleration">
      <brief>AccelerationProfile implementation that doesn't perform any acceleration transformation</brief>
    </struct>
  </namespace>
  <namespace name="plat" ref="plat#plat">
    <namespace name="generic" ref="plat::generic#plat::generic">
      <class name="ChronoClock" ref="plat::generic::ChronoClock#plat::generic::ChronoClock" />
      <struct name="HardwareScheduler" ref="plat::generic::HardwareScheduler#plat::generic::HardwareScheduler" />
      <class name="PrimitiveIoPin" ref="plat::generic::PrimitiveIoPin#plat::generic::PrimitiveIoPin">
        <brief>Implementation for a basic (do-nothing) GPIO pin</brief>
      </class>
      <class name="ThisThreadSleep" ref="plat::generic::ThisThreadSleep#plat::generic::ThisThreadSleep" />
    </namespace>
    <namespace name="rpi" ref="plat::rpi#plat::rpi">
      <class name="ChronoClock" ref="plat::rpi::ChronoClock#plat::rpi::ChronoClock" />
      <struct name="DmaChannelHeader" ref="plat::rpi::DmaChannelHeader#plat::rpi::DmaChannelHeader">
        <brief>forward declare classes defined in the platforms/rpi/hardwarescheduler.cpp</brief>
      </struct>
      <struct name="DmaControlBlock" ref="plat::rpi::DmaControlBlock#plat::rpi::DmaControlBlock" />
      <struct name="GpioBufferFrame" ref="plat::rpi::GpioBufferFrame#plat::rpi::GpioBufferFrame">
        <brief>custom structure used for storing the GPIO buffer.</brief>
      </struct>
      <class name="HardwareScheduler" ref="plat::rpi::HardwareScheduler#plat::rpi::HardwareScheduler" />
      <class name="PrimitiveIoPin" ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin">
        <brief>forward declare class defined in platforms/rpi/primitiveiopin.h</brief>
      </class>
      <struct name="PwmHeader" ref="plat::rpi::PwmHeader#plat::rpi::PwmHeader" />
      <class name="UnwrappedHardwareScheduler" ref="plat::rpi::UnwrappedHardwareScheduler#plat::rpi::UnwrappedHardwareScheduler" />
    </namespace>
  </namespace>
  <namespace name="tupleutil" ref="tupleutil#tupleutil">
    <namespace name="(anonymous::1)" ref="tupleutil::(anonymous::1)#tupleutil::(anonymous::1)">
      <brief>internal functions - treat as private</brief>
      <structtemplate name="__callOnAll" ref="tupleutil::(anonymous::1)::__callOnAll#tupleutil::(anonymous::1)::__callOnAll">
        <brief>callOnAll helper functions:</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::TupleT" name="TupleT" />
        <templatenontypeparameter default="std" id="tupleutil::(anonymous::1)::__callOnAll::IdxPlusOne" name="IdxPlusOne">
          <type name="std::size_t" />
        </templatenontypeparameter>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::Func" name="Func" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::Args" name="Args" />
      </structtemplate>
      <structtemplate name="__callOnIndex" ref="tupleutil::(anonymous::1)::__callOnIndex#tupleutil::(anonymous::1)::__callOnIndex">
        <brief>callOnIndex helper functions:</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::TupleT" name="TupleT" />
        <templatenontypeparameter default="std" id="tupleutil::(anonymous::1)::__callOnIndex::MyIdxPlusOne" name="MyIdxPlusOne">
          <type name="std::size_t" />
        </templatenontypeparameter>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::Func" name="Func" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::Args" name="Args" />
      </structtemplate>
      <structtemplate name="_AxisStepper__getNextTime" ref="tupleutil::(anonymous::1)::_AxisStepper__getNextTime#tupleutil::(anonymous::1)::_AxisStepper__getNextTime">
        <brief>Helper classes for AxisStepper::getNextTime method</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::_AxisStepper__getNextTime::TupleT" name="TupleT" />
        <templatenontypeparameter id="tupleutil::(anonymous::1)::_AxisStepper__getNextTime::idx" name="idx">
          <type builtin="yes" name="int" />
        </templatenontypeparameter>
      </structtemplate>
      <struct name="_AxisStepper__initAxisArcSteppers" ref="tupleutil::(anonymous::1)::_AxisStepper__initAxisArcSteppers#tupleutil::(anonymous::1)::_AxisStepper__initAxisArcSteppers">
        <brief>Helper class for AxisStepper::initAxisArcSteppers</brief>
      </struct>
      <struct name="_AxisStepper__initAxisSteppers" ref="tupleutil::(anonymous::1)::_AxisStepper__initAxisSteppers#tupleutil::(anonymous::1)::_AxisStepper__initAxisSteppers">
        <brief>Helper class for AxisStepper::initAxisSteppers</brief>
      </struct>
      <struct name="_AxisStepper__nextStep" ref="tupleutil::(anonymous::1)::_AxisStepper__nextStep#tupleutil::(anonymous::1)::_AxisStepper__nextStep">
        <brief>Helper class for AxisStepper::nextStep method</brief>
      </struct>
    </namespace>
  </namespace>
  <templatetypeparameter id="Drv" name="Drv" />
  <struct name="DefaultGetAccelerationProfile" ref="DefaultGetAccelerationProfile#DefaultGetAccelerationProfile" />
  <struct name="DefaultGetCoordMap" ref="DefaultGetCoordMap#DefaultGetCoordMap" />
  <struct name="DefaultGetIoDrivers" ref="DefaultGetIoDrivers#DefaultGetIoDrivers" />
  <class name="FileSystem" ref="FileSystem#FileSystem" />
  <class name="IntervalTimer" ref="IntervalTimer#IntervalTimer" />
  <class name="LowPassFilter" ref="LowPassFilter#LowPassFilter" />
  <class name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
  <struct name="NoFilter" ref="NoFilter#NoFilter" />
  <classtemplate name="OptionalArg" ref="OptionalArg#OptionalArg">
    <brief>allow for a function default value that is not a constant.</brief>
    <templatetypeparameter id="OptionalArg::T" name="T" />
  </classtemplate>
  <class name="OutputEvent" ref="OutputEvent#OutputEvent">
    <brief>forward declare class defined in outputevent.h</brief>
  </class>
  <class name="PID" ref="PID#PID" />
  <classtemplate name="Scheduler" ref="Scheduler#Scheduler">
    <templatetypeparameter id="Scheduler::Interface" name="Interface" />
  </classtemplate>
  <class name="SchedulerBase" ref="SchedulerBase#SchedulerBase" />
  <classtemplate name="State" ref="State#State">
    <templatetypeparameter id="State::Drv" name="Drv" />
  </classtemplate>
  <classtemplate name="TestHelper" ref="TestHelper#TestHelper">
    <templatetypeparameter id="TestHelper::MachineT" name="MachineT">
      <default>
        <type name="machines::Machine" ref="machines::Machine#machines::Machine" />
      </default>
    </templatetypeparameter>
  </classtemplate>
  <classtemplate name="TestMachine" ref="TestMachine#TestMachine">
    <templatetypeparameter id="TestMachine::GetIoDrivers" name="GetIoDrivers">
      <default>
        <type name="DefaultGetIoDrivers" ref="DefaultGetIoDrivers#DefaultGetIoDrivers" />
      </default>
    </templatetypeparameter>
    <templatetypeparameter id="TestMachine::GetCoordMap" name="GetCoordMap">
      <default>
        <type name="DefaultGetCoordMap" ref="DefaultGetCoordMap#DefaultGetCoordMap" />
      </default>
    </templatetypeparameter>
    <templatetypeparameter id="TestMachine::GetAccelerationProfile" name="GetAccelerationProfile">
      <default>
        <type name="DefaultGetAccelerationProfile" ref="DefaultGetAccelerationProfile#DefaultGetAccelerationProfile" />
      </default>
    </templatetypeparameter>
  </classtemplate>
  <structtemplate name="ThisThreadSleepAdapter" ref="ThisThreadSleepAdapter#ThisThreadSleepAdapter">
    <brief>allows for sleeping to an absolute time when the custom clock (EventClockT) has a different offset than the system clock (which is otherwise used for measuring sleep times).</brief>
    <templatetypeparameter id="ThisThreadSleepAdapter::ClockT" name="ClockT">
      <brief>the clock to which absolute times should be compared.</brief>
    </templatetypeparameter>
    <templatetypeparameter id="ThisThreadSleepAdapter::SleepT" name="SleepT">
      <brief>a type or namespace that implements the sleep_for function (like ThisThreadSleepPosix or std::this_thread) which can sleep for a RELATIVE TIME.</brief>
    </templatetypeparameter>
  </structtemplate>
  <classtemplate name="Vector3" ref="Vector3#Vector3">
    <brief>mathematical vector utility</brief>
    <templatetypeparameter id="Vector3::F" name="F" />
  </classtemplate>
  <classtemplate name="Vector4" ref="Vector4#Vector4">
    <brief>4-Vector composed of an (x, y, z) point in cartesian space plus an e (Extruded-length) component</brief>
    <templatetypeparameter id="Vector4::F" name="F" />
  </classtemplate>
  <enum anonymous="yes" id="LengthUnit" name="LengthUnit">
    <brief>g-code coordinates can either be interpreted as having units of millimeters or units of inches</brief>
    <enumvalue id="UNIT_MM" name="UNIT_MM" value="0" />
    <enumvalue id="UNIT_IN" name="UNIT_IN" value="1" />
  </enum>
  <enum anonymous="yes" id="OnIdleCpuIntervalT" name="OnIdleCpuIntervalT">
    <brief>Scheduler::Interface::onIdleCpu() can be called with a flag indicating (roughly) how long it's been since it was last called.</brief>
    <enumvalue id="OnIdleCpuIntervalShort" name="OnIdleCpuIntervalShort" value="0" />
    <enumvalue id="OnIdleCpuIntervalWide" name="OnIdleCpuIntervalWide" value="1" />
  </enum>
  <enum anonymous="yes" id="PositionMode" name="PositionMode">
    <brief>g-code coordinates can either be interpreted as absolute or relative to the last coordinates received</brief>
    <enumvalue id="POS_ABSOLUTE" name="POS_ABSOLUTE" value="0" />
    <enumvalue id="POS_RELATIVE" name="POS_RELATIVE" value="1" />
  </enum>
  <enum anonymous="yes" id="TestHelperCtorFlags" name="TestHelperCtorFlags">
    <enumvalue id="TESTHELPER_ENTER_EVENT_LOOP" name="TESTHELPER_ENTER_EVENT_LOOP" value="1" />
    <enumvalue id="TESTHELPER_NO_ENTER_EVENT_LOOP" name="TESTHELPER_NO_ENTER_EVENT_LOOP" value="0" />
    <enumvalue id="TESTHELPER_PERSISTENT_ROOT_COM" name="TESTHELPER_PERSISTENT_ROOT_COM" value="2" />
    <enumvalue id="TESTHELPER_NO_PERSISTENT_ROOT_COM" name="TESTHELPER_NO_PERSISTENT_ROOT_COM" value="0" />
    <function id="operator|" name="operator|">
      <brief>bitwise OR operator for TestHelperCtorFlags, to avoid a bitwise OR resulting in an integer type instead of a TestHelperCtorFlags type.</brief>
      <return>
        <type name="TestHelperCtorFlags" ref="index#TestHelperCtorFlags" />
      </return>
      <argument id="operator|::a" name="a">
        <type name="TestHelperCtorFlags" ref="index#TestHelperCtorFlags" />
      </argument>
      <argument id="operator|::b" name="b">
        <type name="TestHelperCtorFlags" ref="index#TestHelperCtorFlags" />
      </argument>
    </function>
  </enum>
  <typedef id="AxisIdType" name="AxisIdType">
    <brief>This determines the maximum number of axis we can have on the machine</brief>
    <doc>Since most machines only need 3-6 degrees of freedom, an 8-bit integer is PLENTY</doc>
    <type name="uint8_t" />
  </typedef>
  <typedef id="CelciusType" name="CelciusType">
    <type builtin="yes" name="float" />
  </typedef>
  <typedef id="EventClockT" name="EventClockT">
    <type name="plat::generic::ChronoClock" ref="plat::generic::ChronoClock#plat::generic::ChronoClock" />
  </typedef>
  <typedef id="HardwareScheduler" name="HardwareScheduler">
    <type name="plat::generic::HardwareScheduler" ref="plat::generic::HardwareScheduler#plat::generic::HardwareScheduler" />
  </typedef>
  <typedef id="IoLevel" name="IoLevel">
    <type builtin="yes" name="bool" />
  </typedef>
  <typedef id="PrimitiveIoPin" name="PrimitiveIoPin">
    <type name="plat::generic::PrimitiveIoPin" ref="plat::generic::PrimitiveIoPin#plat::generic::PrimitiveIoPin" />
  </typedef>
  <typedef id="SleepT" name="SleepT">
    <type name="plat::generic::ThisThreadSleep" ref="plat::generic::ThisThreadSleep#plat::generic::ThisThreadSleep" />
  </typedef>
  <typedef id="Vector3d" name="Vector3d">
    <brief>3-component (x, y, z) vector using higher precision (64-bit) doubles</brief>
    <type name="Vector3&lt;double&gt;" />
  </typedef>
  <typedef id="Vector3f" name="Vector3f">
    <brief>3-component (x, y, z) vector using (32-bit) floats</brief>
    <type name="Vector3&lt;float&gt;" />
  </typedef>
  <typedef id="Vector4d" name="Vector4d">
    <brief>4-component (x, y, z) vector using higher precision (64-bit) doubles</brief>
    <type name="Vector4&lt;double&gt;" />
  </typedef>
  <typedef id="Vector4f" name="Vector4f">
    <brief>4-component (x, y, z) vector using (32-bit) floats</brief>
    <type name="Vector4&lt;float&gt;" />
  </typedef>
  <report name="Documentation generator" ref="report" />
</index>
