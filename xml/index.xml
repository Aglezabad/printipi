<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <variable id="NotPresent" name="NotPresent">
    <type name="OptionalArg&lt;float&gt;" qualifier=" const" />
  </variable>
  <namespace name="argparse" ref="argparse#argparse" />
  <namespace name="gparse" ref="gparse#gparse">
    <brief>#List of commands on Reprap Wiki:</brief>
    <class name="Com" ref="gparse::Com#gparse::Com" />
    <class name="Command" ref="gparse::Command#gparse::Command" />
    <class name="Response" ref="gparse::Response#gparse::Response" />
  </namespace>
  <namespace name="iodrv" ref="iodrv#iodrv">
    <brief>for StepDirection</brief>
    <class name="A4988" ref="iodrv::A4988#iodrv::A4988" />
    <class name="Endstop" ref="iodrv::Endstop#iodrv::Endstop" />
    <class name="Fan" ref="iodrv::Fan#iodrv::Fan" />
    <class name="IODriver" ref="iodrv::IODriver#iodrv::IODriver" />
    <class name="IoPin" ref="iodrv::IoPin#iodrv::IoPin">
      <class name="null" ref="iodrv::IoPin::null#iodrv::IoPin::null">
        <brief>forward-declare a 'null' class for IoPin so that we can initialze IoPin(IoPin::null()) explicitly</brief>
      </class>
    </class>
    <class name="RCThermistor" ref="iodrv::RCThermistor#iodrv::RCThermistor" />
    <class name="Servo" ref="iodrv::Servo#iodrv::Servo">
      <brief>Controls a Servo motor.</brief>
    </class>
    <classtemplate name="TempControl" ref="iodrv::TempControl#iodrv::TempControl">
      <templatetypeparameter id="iodrv::TempControl::Thermistor" name="Thermistor" />
      <templatetypeparameter id="iodrv::TempControl::PID" name="PID">
        <default>
          <type name="PID" ref="PID#PID" />
        </default>
      </templatetypeparameter>
      <templatetypeparameter id="iodrv::TempControl::Filter" name="Filter">
        <default>
          <type name="NoFilter" ref="NoFilter#NoFilter" />
        </default>
      </templatetypeparameter>
    </classtemplate>
  </namespace>
  <namespace name="logging" ref="logging#logging" />
  <namespace name="machines" ref="machines#machines">
    <namespace name="generic" ref="machines::generic#machines::generic">
      <class name="cartesian" ref="machines::generic::cartesian#machines::generic::cartesian">
        <brief>for Acceleration &amp; such</brief>
      </class>
    </namespace>
    <namespace name="rpi" ref="machines::rpi#machines::rpi">
      <class name="kosselrampsfd" ref="machines::rpi::kosselrampsfd#machines::rpi::kosselrampsfd">
        <brief>for ConstantAcceleration &amp; such</brief>
      </class>
    </namespace>
    <class name="Machine" ref="machines::Machine#machines::Machine" />
  </namespace>
  <namespace name="mathutil" ref="mathutil#mathutil" />
  <namespace name="mitpi" ref="mitpi#mitpi">
    <brief>for uint32_t</brief>
    <struct name="InitMitpiType" ref="mitpi::InitMitpiType#mitpi::InitMitpiType" />
  </namespace>
  <namespace name="motion" ref="motion#motion">
    <brief>forward declare for class in "endstop.h"</brief>
    <struct name="AccelerationProfile" ref="motion::AccelerationProfile#motion::AccelerationProfile" />
    <structtemplate name="array_size" ref="motion::array_size#motion::array_size">
      <templatetypeparameter id="motion::array_size::ArrayT" name="ArrayT" />
    </structtemplate>
    <class name="AxisStepper" ref="motion::AxisStepper#motion::AxisStepper">
      <structtemplate name="GetArcStepperTypes" ref="motion::AxisStepper::GetArcStepperTypes#motion::AxisStepper::GetArcStepperTypes">
        <brief>Arc steppers:</brief>
        <templatetypeparameter id="motion::AxisStepper::GetArcStepperTypes::Types" name="Types" />
      </structtemplate>
    </class>
    <classtemplate name="AxisStepperWithDriver" ref="motion::AxisStepperWithDriver#motion::AxisStepperWithDriver">
      <templatetypeparameter id="motion::AxisStepperWithDriver::StepperDriver" name="StepperDriver" />
    </classtemplate>
    <class name="ConstantAcceleration" ref="motion::ConstantAcceleration#motion::ConstantAcceleration" />
    <class name="CoordMap" ref="motion::CoordMap#motion::CoordMap" />
    <classtemplate name="LinearCoordMap" ref="motion::LinearCoordMap#motion::LinearCoordMap">
      <templatetypeparameter id="motion::LinearCoordMap::Stepper1" name="Stepper1" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper2" name="Stepper2" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper3" name="Stepper3" />
      <templatetypeparameter id="motion::LinearCoordMap::Stepper4" name="Stepper4" />
      <templatetypeparameter id="motion::LinearCoordMap::BedLevelT" name="BedLevelT">
        <default>
          <type name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
        </default>
      </templatetypeparameter>
    </classtemplate>
    <classtemplate name="LinearDeltaArcStepper" ref="motion::LinearDeltaArcStepper#motion::LinearDeltaArcStepper">
      <templatetypeparameter id="motion::LinearDeltaArcStepper::StepperDriverT" name="StepperDriverT" />
      <templatenontypeparameter id="motion::LinearDeltaArcStepper::AxisIdx" name="AxisIdx">
        <type name="motion::DeltaAxis" ref="motion#motion::DeltaAxis" />
      </templatenontypeparameter>
    </classtemplate>
    <classtemplate name="LinearDeltaCoordMap" ref="motion::LinearDeltaCoordMap#motion::LinearDeltaCoordMap">
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper1" name="Stepper1" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper2" name="Stepper2" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper3" name="Stepper3" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::Stepper4" name="Stepper4" />
      <templatetypeparameter id="motion::LinearDeltaCoordMap::BedLevelT" name="BedLevelT">
        <default>
          <type name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
        </default>
      </templatetypeparameter>
    </classtemplate>
    <classtemplate name="LinearDeltaStepper" ref="motion::LinearDeltaStepper#motion::LinearDeltaStepper">
      <templatetypeparameter id="motion::LinearDeltaStepper::StepperDriverT" name="StepperDriverT" />
      <templatenontypeparameter id="motion::LinearDeltaStepper::AxisIdx" name="AxisIdx">
        <type name="motion::DeltaAxis" ref="motion#motion::DeltaAxis" />
      </templatenontypeparameter>
    </classtemplate>
    <classtemplate name="LinearStepper" ref="motion::LinearStepper#motion::LinearStepper">
      <templatetypeparameter id="motion::LinearStepper::StepperDriverT" name="StepperDriverT" />
      <templatenontypeparameter id="motion::LinearStepper::CoordType" name="CoordType">
        <type name="motion::CartesianAxis" ref="motion#motion::CartesianAxis" />
      </templatenontypeparameter>
    </classtemplate>
    <classtemplate name="MaxOutputEventSequenceSize" ref="motion::MaxOutputEventSequenceSize#motion::MaxOutputEventSequenceSize">
      <templatetypeparameter id="motion::MaxOutputEventSequenceSize::AxisStepperTypes" name="AxisStepperTypes" />
      <templatenontypeparameter default="std" id="motion::MaxOutputEventSequenceSize::IdxPlusOne" name="IdxPlusOne">
        <type name="std::size_t" />
      </templatenontypeparameter>
    </classtemplate>
    <classtemplate name="MotionPlanner" ref="motion::MotionPlanner#motion::MotionPlanner">
      <templatetypeparameter id="motion::MotionPlanner::Interface" name="Interface" />
    </classtemplate>
    <struct name="NoAcceleration" ref="motion::NoAcceleration#motion::NoAcceleration" />
  </namespace>
  <namespace name="plat" ref="plat#plat">
    <brief># to divide the NOMINAL_CLOCK_FREQ by before passing it to the PWM peripheral.</brief>
    <namespace name="generic" ref="plat::generic#plat::generic">
      <class name="ChronoClock" ref="plat::generic::ChronoClock#plat::generic::ChronoClock" />
      <struct name="HardwareScheduler" ref="plat::generic::HardwareScheduler#plat::generic::HardwareScheduler" />
      <class name="PrimitiveIoPin" ref="plat::generic::PrimitiveIoPin#plat::generic::PrimitiveIoPin" />
      <class name="ThisThreadSleep" ref="plat::generic::ThisThreadSleep#plat::generic::ThisThreadSleep" />
    </namespace>
    <namespace name="rpi" ref="plat::rpi#plat::rpi">
      <class name="ChronoClock" ref="plat::rpi::ChronoClock#plat::rpi::ChronoClock" />
      <struct name="DmaChannelHeader" ref="plat::rpi::DmaChannelHeader#plat::rpi::DmaChannelHeader">
        <brief>defined in primitiveiopin.h</brief>
      </struct>
      <struct name="DmaControlBlock" ref="plat::rpi::DmaControlBlock#plat::rpi::DmaControlBlock" />
      <struct name="GpioBufferFrame" ref="plat::rpi::GpioBufferFrame#plat::rpi::GpioBufferFrame">
        <brief>custom structure used for storing the GPIO buffer.</brief>
      </struct>
      <class name="HardwareScheduler" ref="plat::rpi::HardwareScheduler#plat::rpi::HardwareScheduler" />
      <class name="PrimitiveIoPin" ref="plat::rpi::PrimitiveIoPin#plat::rpi::PrimitiveIoPin" />
      <struct name="PwmHeader" ref="plat::rpi::PwmHeader#plat::rpi::PwmHeader" />
    </namespace>
  </namespace>
  <namespace name="tupleutil" ref="tupleutil#tupleutil">
    <namespace name="(anonymous::1)" ref="tupleutil::(anonymous::1)#tupleutil::(anonymous::1)">
      <structtemplate name="__callOnAll" ref="tupleutil::(anonymous::1)::__callOnAll#tupleutil::(anonymous::1)::__callOnAll">
        <brief>callOnAll helper functions:</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::TupleT" name="TupleT" />
        <templatenontypeparameter default="std" id="tupleutil::(anonymous::1)::__callOnAll::IdxPlusOne" name="IdxPlusOne">
          <type name="std::size_t" />
        </templatenontypeparameter>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::Func" name="Func" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAll::Args" name="Args" />
      </structtemplate>
      <structtemplate name="__callOnAllReduce" ref="tupleutil::(anonymous::1)::__callOnAllReduce#tupleutil::(anonymous::1)::__callOnAllReduce">
        <brief>tupleReduce helper functions:</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAllReduce::TupleT" name="TupleT" />
        <templatenontypeparameter default="std" id="tupleutil::(anonymous::1)::__callOnAllReduce::IdxPlusOne" name="IdxPlusOne">
          <type name="std::size_t" />
        </templatenontypeparameter>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAllReduce::Func" name="Func" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAllReduce::Reduce" name="Reduce" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAllReduce::ReducedDefault" name="ReducedDefault" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnAllReduce::Args" name="Args" />
      </structtemplate>
      <structtemplate name="__callOnIndex" ref="tupleutil::(anonymous::1)::__callOnIndex#tupleutil::(anonymous::1)::__callOnIndex">
        <brief>callOnIndex helper functions:</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::TupleT" name="TupleT" />
        <templatenontypeparameter default="std" id="tupleutil::(anonymous::1)::__callOnIndex::MyIdxPlusOne" name="MyIdxPlusOne">
          <type name="std::size_t" />
        </templatenontypeparameter>
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::Func" name="Func" />
        <templatetypeparameter id="tupleutil::(anonymous::1)::__callOnIndex::Args" name="Args" />
      </structtemplate>
      <structtemplate name="_AxisStepper__getNextTime" ref="tupleutil::(anonymous::1)::_AxisStepper__getNextTime#tupleutil::(anonymous::1)::_AxisStepper__getNextTime">
        <brief>Helper classes for AxisStepper::getNextTime method</brief>
        <templatetypeparameter id="tupleutil::(anonymous::1)::_AxisStepper__getNextTime::TupleT" name="TupleT" />
        <templatenontypeparameter id="tupleutil::(anonymous::1)::_AxisStepper__getNextTime::idx" name="idx">
          <type builtin="yes" name="int" />
        </templatenontypeparameter>
      </structtemplate>
      <struct name="_AxisStepper__initAxisArcSteppers" ref="tupleutil::(anonymous::1)::_AxisStepper__initAxisArcSteppers#tupleutil::(anonymous::1)::_AxisStepper__initAxisArcSteppers">
        <brief>Helper class for AxisStepper::initAxisArcSteppers</brief>
      </struct>
      <struct name="_AxisStepper__initAxisSteppers" ref="tupleutil::(anonymous::1)::_AxisStepper__initAxisSteppers#tupleutil::(anonymous::1)::_AxisStepper__initAxisSteppers">
        <brief>Helper class for AxisStepper::initAxisSteppers</brief>
      </struct>
      <struct name="_AxisStepper__nextStep" ref="tupleutil::(anonymous::1)::_AxisStepper__nextStep#tupleutil::(anonymous::1)::_AxisStepper__nextStep">
        <brief>Helper class for AxisStepper::nextStep method</brief>
      </struct>
      <struct name="IODriver__getBedTemp" ref="tupleutil::(anonymous::1)::IODriver__getBedTemp#tupleutil::(anonymous::1)::IODriver__getBedTemp">
        <brief>IODriver::getBedTemp helper functions:</brief>
      </struct>
      <struct name="IODriver__getHotendTargetTemp" ref="tupleutil::(anonymous::1)::IODriver__getHotendTargetTemp#tupleutil::(anonymous::1)::IODriver__getHotendTargetTemp">
        <brief>IODriver::getHotendTargetTemp helper functions:</brief>
      </struct>
      <struct name="IODriver__getHotendTemp" ref="tupleutil::(anonymous::1)::IODriver__getHotendTemp#tupleutil::(anonymous::1)::IODriver__getHotendTemp">
        <brief>IODriver::getHotendTemp helper functions:</brief>
      </struct>
      <struct name="IODriver__lockAllAxis" ref="tupleutil::(anonymous::1)::IODriver__lockAllAxis#tupleutil::(anonymous::1)::IODriver__lockAllAxis">
        <brief>IODriver::lockAllAxis helper functions:</brief>
      </struct>
      <struct name="IODriver__setBedTemp" ref="tupleutil::(anonymous::1)::IODriver__setBedTemp#tupleutil::(anonymous::1)::IODriver__setBedTemp">
        <brief>IODriver::setBedTemp helper functions:</brief>
      </struct>
      <struct name="IODriver__setHotendTemp" ref="tupleutil::(anonymous::1)::IODriver__setHotendTemp#tupleutil::(anonymous::1)::IODriver__setHotendTemp">
        <brief>IODriver::setHotendTemp helper functions:</brief>
      </struct>
      <struct name="IODriver__unlockAllAxis" ref="tupleutil::(anonymous::1)::IODriver__unlockAllAxis#tupleutil::(anonymous::1)::IODriver__unlockAllAxis">
        <brief>IODriver::unlockAllAxis helper functions:</brief>
      </struct>
    </namespace>
  </namespace>
  <templatetypeparameter id="Drv" name="Drv" />
  <class name="FileSystem" ref="FileSystem#FileSystem" />
  <class name="IntervalTimer" ref="IntervalTimer#IntervalTimer">
    <brief>for EventClockT</brief>
  </class>
  <class name="LowPassFilter" ref="LowPassFilter#LowPassFilter">
    <brief> http://en.wikipedia.org/wiki/Low-pass_filter#Simple_infinite_impulse_response_filter</brief>
  </class>
  <class name="Matrix3x3" ref="Matrix3x3#Matrix3x3" />
  <struct name="NoFilter" ref="NoFilter#NoFilter" />
  <classtemplate name="OptionalArg" ref="OptionalArg#OptionalArg">
    <brief>allow for a function default value that is not a constant.</brief>
    <templatetypeparameter id="OptionalArg::T" name="T" />
  </classtemplate>
  <class name="OutputEvent" ref="OutputEvent#OutputEvent">
    <brief>for IoLevel</brief>
  </class>
  <class name="PID" ref="PID#PID">
    <brief>for EventClockT</brief>
  </class>
  <classtemplate name="Scheduler" ref="Scheduler#Scheduler">
    <templatetypeparameter id="Scheduler::Interface" name="Interface" />
  </classtemplate>
  <class name="SchedulerBase" ref="SchedulerBase#SchedulerBase">
    <brief> Base class from which all templated schedulers derive.</brief>
  </class>
  <classtemplate name="State" ref="State#State">
    <templatetypeparameter id="State::Drv" name="Drv" />
  </classtemplate>
  <classtemplate name="ThisThreadSleepAdapter" ref="ThisThreadSleepAdapter#ThisThreadSleepAdapter">
    <templatetypeparameter id="ThisThreadSleepAdapter::ClockT" name="ClockT" />
    <templatetypeparameter id="ThisThreadSleepAdapter::SleepT" name="SleepT" />
  </classtemplate>
  <classtemplate name="Vector3" ref="Vector3#Vector3">
    <brief>mathematical vector utility</brief>
    <templatetypeparameter id="Vector3::F" name="F" />
  </classtemplate>
  <classtemplate name="Vector4" ref="Vector4#Vector4">
    <brief>4-Vector composed of an (x, y, z) point in cartesian space plus an e (Extruded-length) component</brief>
    <templatetypeparameter id="Vector4::F" name="F" />
  </classtemplate>
  <enum anonymous="yes" id="LengthUnit" name="LengthUnit">
    <brief>g-code coordinates can either be interpreted as having units of millimeters or units of inches</brief>
    <enumvalue id="UNIT_MM" name="UNIT_MM" value="0" />
    <enumvalue id="UNIT_IN" name="UNIT_IN" value="1" />
  </enum>
  <enum anonymous="yes" id="OnIdleCpuIntervalT" name="OnIdleCpuIntervalT">
    <brief>Scheduler::Interface::onIdleCpu() can be called with a flag indicating (roughly) how long it's been since it was last called.</brief>
    <enumvalue id="OnIdleCpuIntervalShort" name="OnIdleCpuIntervalShort" value="0" />
    <enumvalue id="OnIdleCpuIntervalWide" name="OnIdleCpuIntervalWide" value="1" />
  </enum>
  <enum anonymous="yes" id="PositionMode" name="PositionMode">
    <brief>g-code coordinates can either be interpreted as absolute or relative to the last coordinates received</brief>
    <enumvalue id="POS_ABSOLUTE" name="POS_ABSOLUTE" value="0" />
    <enumvalue id="POS_RELATIVE" name="POS_RELATIVE" value="1" />
  </enum>
  <typedef id="AxisIdType" name="AxisIdType">
    <brief>This determines the maximum number of axis we can have on the machine</brief>
    <doc>Since most machines only need 3-6 degrees of freedom, an 8-bit integer is PLENTY</doc>
    <type name="uint8_t" />
  </typedef>
  <typedef id="CelciusType" name="CelciusType">
    <type builtin="yes" name="float" />
  </typedef>
  <typedef id="EventClockT" name="EventClockT">
    <type name="plat::generic::ChronoClock" ref="plat::generic::ChronoClock#plat::generic::ChronoClock" />
  </typedef>
  <typedef id="HardwareScheduler" name="HardwareScheduler">
    <type name="plat::generic::HardwareScheduler" ref="plat::generic::HardwareScheduler#plat::generic::HardwareScheduler" />
  </typedef>
  <typedef id="IoLevel" name="IoLevel">
    <type builtin="yes" name="bool" />
  </typedef>
  <typedef id="PrimitiveIoPin" name="PrimitiveIoPin">
    <type name="plat::generic::PrimitiveIoPin" ref="plat::generic::PrimitiveIoPin#plat::generic::PrimitiveIoPin" />
  </typedef>
  <typedef id="SleepT" name="SleepT">
    <type name="plat::generic::ThisThreadSleep" ref="plat::generic::ThisThreadSleep#plat::generic::ThisThreadSleep" />
  </typedef>
  <typedef id="Vector3d" name="Vector3d">
    <brief>3-component (x, y, z) vector using higher precision (64-bit) doubles</brief>
    <type name="Vector3&lt;double&gt;" />
  </typedef>
  <typedef id="Vector3f" name="Vector3f">
    <brief>3-component (x, y, z) vector using (32-bit) floats</brief>
    <type name="Vector3&lt;float&gt;" />
  </typedef>
  <typedef id="Vector4d" name="Vector4d">
    <brief>4-component (x, y, z) vector using higher precision (64-bit) doubles</brief>
    <type name="Vector4&lt;double&gt;" />
  </typedef>
  <typedef id="Vector4f" name="Vector4f">
    <brief>4-component (x, y, z) vector using (32-bit) floats</brief>
    <type name="Vector4&lt;float&gt;" />
  </typedef>
  <report name="Documentation generator" ref="report" />
</index>
