<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="iodrv::TempControl" name="TempControl" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
TempControl provides a way to coordinate thermistor readings with the PWM control of a hotend OR heated bed.
It used a PID controller to determine the ideal PWM for a given thermistor reading and temperature target.
Additionally, it accepts an (optional) filter applied BEFORE the PID controller, which can be used to weed out some variability in readings (use a low-pass filter for this).
Currently, it assumes an RC-based thermistor, but in the future it may be expanded to work with any analog IoPin too.
</doc>
  <base access="public">
    <type name="IODriver" ref="iodrv::IODriver#iodrv::IODriver" />
  </base>
  <templatetypeparameter id="iodrv::TempControl::Thermistor" name="Thermistor" />
  <templatetypeparameter id="iodrv::TempControl::PID" name="PID">
    <default>
      <type name="PID" ref="PID#PID" />
    </default>
  </templatetypeparameter>
  <templatetypeparameter id="iodrv::TempControl::Filter" name="Filter">
    <default>
      <type name="NoFilter" ref="NoFilter#NoFilter" />
    </default>
  </templatetypeparameter>
  <constructor id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;" name="TempControl&lt;Thermistor, PID, Filter&gt;">
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::hotType" name="hotType">
      <type name="TempControlType" ref="iodrv#iodrv::TempControlType" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::heater" name="heater">
      <type name="IoPin &amp;&amp;" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::therm" name="therm">
      <type name="Thermistor &amp;&amp;" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::pid" name="pid">
      <type name="const PID" qualifier=" const &amp;" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::filter" name="filter">
      <type name="const Filter" qualifier=" const &amp;" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::pwmPeriod" name="pwmPeriod">
      <type name="plat::generic::ChronoClock::duration" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::duration" />
    </argument>
    <argument id="iodrv::TempControl::TempControl&lt;Thermistor, PID, Filter&gt;::pwmUpdateInterval" name="pwmUpdateInterval">
      <type name="plat::generic::ChronoClock::duration" ref="plat::generic::ChronoClock#plat::generic::ChronoClock::duration" />
    </argument>
  </constructor>
  <method id="iodrv::TempControl::isHotend" name="isHotend" override="yes">
    <brief>register as the correct device type</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <override name="IODriver::isHotend" ref="iodrv::IODriver#iodrv::IODriver::isHotend" />
  </method>
  <method id="iodrv::TempControl::isHeatedBed" name="isHeatedBed" override="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <override name="IODriver::isHeatedBed" ref="iodrv::IODriver#iodrv::IODriver::isHeatedBed" />
  </method>
  <method id="iodrv::TempControl::setTargetTemperature" name="setTargetTemperature" override="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="iodrv::TempControl::setTargetTemperature::t" name="t">
      <type name="CelciusType" ref="index#CelciusType" />
    </argument>
    <override name="IODriver::setTargetTemperature" ref="iodrv::IODriver#iodrv::IODriver::setTargetTemperature" />
  </method>
  <method id="iodrv::TempControl::getMeasuredTemperature" name="getMeasuredTemperature" override="yes">
    <return>
      <type name="CelciusType" ref="index#CelciusType" />
    </return>
    <override name="IODriver::getMeasuredTemperature" ref="iodrv::IODriver#iodrv::IODriver::getMeasuredTemperature" />
  </method>
  <method id="iodrv::TempControl::getTargetTemperature" name="getTargetTemperature" override="yes">
    <return>
      <type name="CelciusType" ref="index#CelciusType" />
    </return>
    <override name="IODriver::getTargetTemperature" ref="iodrv::IODriver#iodrv::IODriver::getTargetTemperature" />
  </method>
  <method id="iodrv::TempControl::onIdleCpu" name="onIdleCpu" override="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="iodrv::TempControl::onIdleCpu::interval" name="interval">
      <type name="OnIdleCpuIntervalT" ref="index#OnIdleCpuIntervalT" />
    </argument>
    <override name="IODriver::onIdleCpu" ref="iodrv::IODriver#iodrv::IODriver::onIdleCpu" />
  </method>
</classtemplate>
